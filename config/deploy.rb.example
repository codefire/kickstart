default_run_options[:pty] = true
set :application, "kickstart"
set :repository,  "git@github.com:codefire/#{application}"
set :scm, :git
set :deploy_to, "/home/deploy/apps/#{application}"
set :shared_dir, "shared"
set :use_sudo, false
set :git_enable_submodules, 1

task :to_staging do 
  set :user, "kickstart"
  set :password, "12qwaszx"
  set :prod_db, "kickstart_staging"
  set :db_hostname, "db01.mel.blox.net.au"
  set :db_port, 5441

  role :app, "deploy@kickstart.staging.blox.net.au"
  role :web, "deploy@kickstart.staging.blox.net.au"
  role :db,  "deploy@kickstart.staging.blox.net.au", :primary => true
end

task :to_production do 
  set :user, "kickstart"
  set :password, "12qwaszx"
  set :prod_db, "kickstart_production"
  set :db_hostname, "db01.mel.blox.net.au"
  set :db_port, 5441

  role :app, "deploy@kickstart"
  role :web, "deploy@kickstart"
  role :db,  "deploy@kickstart", :primary => true
end

desc "Create extra directories"
task :after_setup do
  run "mkdir -p #{deploy_to}/#{shared_dir}/config/"
end

after "deploy:symlink" do

  # Install any required gems
  # run "#{sudo} /usr/bin/rake gems:install RAILS_ENV=production"

  template = File.read("config/database.yml.erb")
  database_configuration = ERB.new(template).result(binding)
  put database_configuration, "#{deploy_to}/#{shared_dir}/config/database.yml" 
  run "rm -f #{release_path}/config/database.yml"
  run "ln -nfs #{deploy_to}/#{shared_dir}/config/database.yml #{release_path}/config/database.yml"

  run("cd #{deploy_to}/current; /usr/bin/rake db:migrate RAILS_ENV=production")
end

after "deploy:symlink", "deploy:update_crontab"

namespace :deploy do
  desc "Update the crontab file"
  task :update_crontab, :roles => :db do
    run "cd #{release_path} && whenever --update-crontab #{application}"
  end
end


namespace :deploy do
  desc "Restart Application"
  task :restart, :roles => :app do
    run "touch #{current_path}/tmp/restart.txt"
  end
end

namespace :deploy do
  namespace :web do

    desc "Serve up a custom maintenance page."
    task :disable, :roles => :web do
      require 'erb'
      on_rollback { run "rm #{shared_path}/system/maintenance.html" }
      
      reason      = ENV['REASON']
      deadline    = ENV['UNTIL']
      
      template = File.read("app/views/layouts/maintenance.html.erb")
      page = ERB.new(template).result(binding)
      
      put page, "#{shared_path}/system/maintenance.html", 
                :mode => 0644
    end
  end
end

